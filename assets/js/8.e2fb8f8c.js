(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{373:function(e,t,s){"use strict";s.r(t);var a=s(45),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"preloading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#preloading"}},[e._v("#")]),e._v(" Preloading")]),e._v(" "),s("h2",{attrs:{id:"premise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#premise"}},[e._v("#")]),e._v(" Premise")]),e._v(" "),s("p",[e._v("At the core of preloading is the desire to "),s("strong",[e._v("reduce")]),e._v(" the amount of times Botanist generates "),s("code",[e._v("n + 1")]),e._v(" queries. Many solutions exist to approach this problem, the most common in GraphQL being "),s("a",{attrs:{href:"https://github.com/graphql/dataloader",target:"_blank",rel:"noopener noreferrer"}},[e._v("DataLoader"),s("OutboundLink")],1),e._v(". Botanist does not contain a full re-implementation of DataLoader, but does make significant efforts to avoid runaway "),s("code",[e._v("n + 1")]),e._v(" query creation.")]),e._v(" "),s("h2",{attrs:{id:"the-n-1-problem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-n-1-problem"}},[e._v("#")]),e._v(" The n + 1 Problem")]),e._v(" "),s("p",[e._v("Imagine the following hypothetical query:")]),e._v(" "),s("div",{staticClass:"language-graphql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-graphql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("query")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    heros"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        id\n        first_name\n        enemies "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            id\n            first_name\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("A fairly typical nested query by all accounts. A naive approach to loading the required data might yield queries looking like:")]),e._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" first_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" heros "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("IN")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" first_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" enemies "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" first_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" enemies "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" first_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" enemies "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" first_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" enemies "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" first_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" enemies "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("p",[e._v("While not particularly problematic at a small scale, as we increase the number of heros we query for or begin requesting additional nested data from our "),s("code",[e._v("enemies")]),e._v(", the number of queries begins to grow exponentially. For every new hero, we end up with a new SQL query.")]),e._v(" "),s("h2",{attrs:{id:"preloading-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#preloading-2"}},[e._v("#")]),e._v(" Preloading")]),e._v(" "),s("p",[e._v("To avoid the above case, when Botanist loads the query above it will "),s("em",[e._v("bulk preload")]),e._v(" descendant models "),s("em",[e._v("before")]),e._v(" their individual resolvers run. The loading process looks something like:")]),e._v(" "),s("ol",[s("li",[e._v("Load all "),s("code",[e._v("Hero")]),e._v("s using a bulk query (like the first line in the above example). This happens any time we use a bulk resolver and doesn't rely on any special preloading logic.")]),e._v(" "),s("li",[e._v("Inspect the Juniper "),s("code",[e._v("LookAheadSelection")]),e._v(" to determine what fields are being queried on these "),s("code",[e._v("Hero")]),e._v("s.\n"),s("ul",[s("li",[e._v("If these fields are plain fields (i.e they map to columns in the underlying database), do nothing as they should already have been loaded in the first query.")]),e._v(" "),s("li",[e._v("If these fields are behind "),s("code",[e._v("HasOne")]),e._v(" or "),s("code",[e._v("HasMany")]),e._v(" relationships, take note of the primary key(s) being requested.")])])]),e._v(" "),s("li",[e._v("Load all of the newly discovered primary keys in bulk (per given type). In the above example, this consolidates all "),s("code",[e._v("enemies")]),e._v(" queries into one query utilizing "),s("code",[e._v("IN")]),e._v(".")]),e._v(" "),s("li",[e._v("Cache these 'preloaded' models on their parent models (stored in 'hidden' fields of type "),s("code",[e._v("Option<T>")]),e._v(" or "),s("code",[e._v("Option<Vec<T>>")]),e._v(").")]),e._v(" "),s("li",[e._v("Rinse and repeat. Attempt this process on all of the models that were just preloaded.")])]),e._v(" "),s("p",[e._v("Once preloading is finished, when a field that was preloaded is resolved, we return the model loaded during preloading instead of performing a new query. This solves "),s("em",[e._v("most")]),e._v(", but not all "),s("code",[e._v("n + 1")]),e._v(" query issues. In general, it provides satisfactory performance for my current use.")])])}),[],!1,null,null,null);t.default=n.exports}}]);