(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{372:function(e,s,a){"use strict";a.r(s);var t=a(45),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"has-one"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#has-one"}},[e._v("#")]),e._v(" Has One")]),e._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("struct")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[e._v("Hero")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("...")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pub")]),e._v(" location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HasOne")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Uuid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Location")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[a("code",[e._v("HasOne")]),e._v(" fields are an abstraction over Diesel model fields (i.e database forign keys). The "),a("code",[e._v("HasOne")]),e._v(" type takes the type of the underlying field (in this case a "),a("code",[e._v("Uuid")]),e._v("), the referenced models schema and the referenced model itself.")]),e._v(" "),a("p",[e._v("At compile time, this is removed and the Diesel model "),a("code",[e._v("Hero")]),e._v(" will be given a simple "),a("code",[e._v("Uuid")]),e._v(" location field. However, our GraphQL schema will show "),a("code",[e._v("location")]),e._v(" to have a type of "),a("code",[e._v("Location")]),e._v(" and querying for a "),a("code",[e._v("Hero")]),e._v("s "),a("code",[e._v("location")]),e._v(" will allow access to the full type!")]),e._v(" "),a("p",[a("code",[e._v("HasOne")]),e._v(" takes the form of "),a("code",[e._v("HasOne<Primary Key Type, Type Schema, Type Diesel Model>")]),e._v(".")])])}),[],!1,null,null,null);s.default=n.exports}}]);